[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "importPath": "forms",
        "description": "forms",
        "isExtraImport": true,
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "forms",
        "description": "forms",
        "isExtraImport": true,
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Email",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "EqualTo",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.58423cff756b_initial_migration",
        "description": "migrations.versions.58423cff756b_initial_migration",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=80), nullable=False),\n    sa.Column('email', sa.String(length=120), nullable=False),\n    sa.Column('password', sa.String(length=200), nullable=False),\n    sa.Column('role', sa.String(length=50), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('email'),",
        "detail": "migrations.versions.58423cff756b_initial_migration",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.58423cff756b_initial_migration",
        "description": "migrations.versions.58423cff756b_initial_migration",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('user')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.58423cff756b_initial_migration",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.58423cff756b_initial_migration",
        "description": "migrations.versions.58423cff756b_initial_migration",
        "peekOfCode": "revision = '58423cff756b'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=80), nullable=False),\n    sa.Column('email', sa.String(length=120), nullable=False),",
        "detail": "migrations.versions.58423cff756b_initial_migration",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.58423cff756b_initial_migration",
        "description": "migrations.versions.58423cff756b_initial_migration",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=80), nullable=False),\n    sa.Column('email', sa.String(length=120), nullable=False),\n    sa.Column('password', sa.String(length=200), nullable=False),",
        "detail": "migrations.versions.58423cff756b_initial_migration",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.58423cff756b_initial_migration",
        "description": "migrations.versions.58423cff756b_initial_migration",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=80), nullable=False),\n    sa.Column('email', sa.String(length=120), nullable=False),\n    sa.Column('password', sa.String(length=200), nullable=False),\n    sa.Column('role', sa.String(length=50), nullable=False),",
        "detail": "migrations.versions.58423cff756b_initial_migration",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.58423cff756b_initial_migration",
        "description": "migrations.versions.58423cff756b_initial_migration",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=80), nullable=False),\n    sa.Column('email', sa.String(length=120), nullable=False),\n    sa.Column('password', sa.String(length=200), nullable=False),\n    sa.Column('role', sa.String(length=50), nullable=False),\n    sa.PrimaryKeyConstraint('id'),",
        "detail": "migrations.versions.58423cff756b_initial_migration",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(200), nullable=False)\n    role = db.Column(db.String(50), nullable=False)\n    # Password hashing and verification\n    def set_password(self, password):\n        self.password = bcrypt.generate_password_hash(password).decode('utf-8')\n    def check_password(self, password):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_app():\n    app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///your_database_file.db'  # Modify to your database URI\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Optional, to disable modification tracking\napp.config['SECRET_KEY'] = '28bc6cce497a59b9fccae6890f4067f718f375230002a7c3'  # Required for sessions and flash messages\n# Initialize Extensions\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'  # Redirect unauthorized users to login",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def load_user(user_id):\n    return User.query.get(int(user_id))\n# Models\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(200), nullable=False)\n    role = db.Column(db.String(50), nullable=False)\n    # Password hashing and verification",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def load_user(user_id):\n    return User.query.get(int(user_id))\n# Routes\n@app.route('/')\ndef home():\n    return render_template('index.html')\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm()\n    if form.validate_on_submit():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    return render_template('index.html')\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        logging.debug(\"Form is valid\")\n        # Extract form data\n        username = form.username.data\n        email = form.email.data",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def register():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        logging.debug(\"Form is valid\")\n        # Extract form data\n        username = form.username.data\n        email = form.email.data\n        password = form.password.data\n        role = form.role.data  # Ensure your form includes a role field\n        logging.debug(f\"Form data - Username: {username}, Email: {email}, Password: {password}, Role: {role}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login():\n    if current_user.is_authenticated:\n        return redirect(url_for('student_dashboard'))  # Redirect if already logged in\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user)\n            flash('Login successful!', 'success')\n            # Redirect based on user role",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def logout():\n    if 'user_id' in session:\n        session.pop('user_id', None)    \n        session.pop('role', None)\n    return render_template('logout.html')\n@app.route('/logout_page')\ndef logout_page():\n    logout_user()\n    return render_template('logout.html')\n@app.route('/support_group')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logout_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def logout_page():\n    logout_user()\n    return render_template('logout.html')\n@app.route('/support_group')\ndef support_group():\n    return render_template('support_group.html')\n@app.route('/contact')\ndef contact():\n    return render_template('contact.html')      \n@app.route('/resources/')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "support_group",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def support_group():\n    return render_template('support_group.html')\n@app.route('/contact')\ndef contact():\n    return render_template('contact.html')      \n@app.route('/resources/')\ndef resources():\n    return render_template('resources.html')\n@app.route('/profile')\ndef profile():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def contact():\n    return render_template('contact.html')      \n@app.route('/resources/')\ndef resources():\n    return render_template('resources.html')\n@app.route('/profile')\ndef profile():\n    return render_template('profile.html')\n@app.route('/support')\ndef support():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "resources",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def resources():\n    return render_template('resources.html')\n@app.route('/profile')\ndef profile():\n    return render_template('profile.html')\n@app.route('/support')\ndef support():\n    return render_template('support.html')  \n@app.route('/chat') \ndef chat():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def profile():\n    return render_template('profile.html')\n@app.route('/support')\ndef support():\n    return render_template('support.html')  \n@app.route('/chat') \ndef chat():\n    return render_template('chat.html')\n@app.route('/feedback') \ndef feedback():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "support",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def support():\n    return render_template('support.html')  \n@app.route('/chat') \ndef chat():\n    return render_template('chat.html')\n@app.route('/feedback') \ndef feedback():\n    return render_template('feedback.html')\n@app.route('/counsellor')\ndef counsellor():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "chat",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def chat():\n    return render_template('chat.html')\n@app.route('/feedback') \ndef feedback():\n    return render_template('feedback.html')\n@app.route('/counsellor')\ndef counsellor():\n    return render_template('counsellor.html')\n@app.route('/peer_support_dashboard')\n@login_required",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "feedback",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def feedback():\n    return render_template('feedback.html')\n@app.route('/counsellor')\ndef counsellor():\n    return render_template('counsellor.html')\n@app.route('/peer_support_dashboard')\n@login_required\ndef peer_dashboard():\n    if current_user.role != 'peer_supporter':\n        flash('Unauthorized access', 'danger')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "counsellor",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def counsellor():\n    return render_template('counsellor.html')\n@app.route('/peer_support_dashboard')\n@login_required\ndef peer_dashboard():\n    if current_user.role != 'peer_supporter':\n        flash('Unauthorized access', 'danger')\n        return redirect(url_for('login'))\n    return render_template('peer_support_dashboard.html')\n@app.route('/student_dashboard')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "peer_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def peer_dashboard():\n    if current_user.role != 'peer_supporter':\n        flash('Unauthorized access', 'danger')\n        return redirect(url_for('login'))\n    return render_template('peer_support_dashboard.html')\n@app.route('/student_dashboard')\n@login_required\ndef student_dashboard():\n    if current_user.role != 'student':\n        flash('Unauthorized access', 'danger')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "student_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def student_dashboard():\n    if current_user.role != 'student':\n        flash('Unauthorized access', 'danger')\n        return redirect(url_for('login')) \n    return render_template('student_dashboard.html')\n@app.route('/admin-dashboard' , methods=['GET'])\n@login_required\ndef admin_dashboard():\n     print(f\"Is user authenticated? {current_user.is_authenticated}\")\n     print(f\"User ID: {getattr(current_user, 'id', None)}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "admin_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def admin_dashboard():\n     print(f\"Is user authenticated? {current_user.is_authenticated}\")\n     print(f\"User ID: {getattr(current_user, 'id', None)}\")\n     print(f\"User role: {getattr(current_user, 'role', None)}\")\n     if current_user.role != 'admin':\n        flash('Unauthorized access', 'danger')\n        return redirect(url_for('login'))\n     return render_template('admin_dashboard.html')\n# Initialize the database and run the app\nif __name__ == '__main__':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\ndef create_app():\n    app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///your_database_file.db'  # Modify to your database URI\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Optional, to disable modification tracking\napp.config['SECRET_KEY'] = '28bc6cce497a59b9fccae6890f4067f718f375230002a7c3'  # Required for sessions and flash messages\n# Initialize Extensions\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///your_database_file.db'  # Modify to your database URI\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Optional, to disable modification tracking\napp.config['SECRET_KEY'] = '28bc6cce497a59b9fccae6890f4067f718f375230002a7c3'  # Required for sessions and flash messages\n# Initialize Extensions\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'  # Redirect unauthorized users to login\nlogin_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Optional, to disable modification tracking\napp.config['SECRET_KEY'] = '28bc6cce497a59b9fccae6890f4067f718f375230002a7c3'  # Required for sessions and flash messages\n# Initialize Extensions\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'  # Redirect unauthorized users to login\nlogin_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)\nlogin_manager = LoginManager(app)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SECRET_KEY'] = '28bc6cce497a59b9fccae6890f4067f718f375230002a7c3'  # Required for sessions and flash messages\n# Initialize Extensions\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'  # Redirect unauthorized users to login\nlogin_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)\nlogin_manager = LoginManager(app)\n@login_manager.user_loader",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'  # Redirect unauthorized users to login\nlogin_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)\nlogin_manager = LoginManager(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "bcrypt = Bcrypt(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'  # Redirect unauthorized users to login\nlogin_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)\nlogin_manager = LoginManager(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n# Models",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager = LoginManager(app)\nlogin_manager.login_view = 'login'  # Redirect unauthorized users to login\nlogin_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)\nlogin_manager = LoginManager(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n# Models\nclass User(db.Model):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager.login_view = 'login'  # Redirect unauthorized users to login\nlogin_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)\nlogin_manager = LoginManager(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n# Models\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_message_category",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager.login_message_category = 'info'\nmigrate = Migrate(app, db)\nlogin_manager = LoginManager(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n# Models\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "migrate = Migrate(app, db)\nlogin_manager = LoginManager(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n# Models\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager = LoginManager(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n# Models\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(200), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    SECRET_KEY = '28bc6cce497a59b9fccae6890f4067f718f375230002a7c3' \n    SQLALCHEMY_DATABASE_URI = 'sqlite:///your_database_file.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=3, max=25)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n    role = SelectField('Role', choices=[('peer_supporter', 'Peer Supporter'),\n                                        ('counsellor', 'Counsellor'),\n                                        ('student', 'Student'),\n                                        ('admin', 'Admin')],\n                       validators=[DataRequired()])",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember = BooleanField('Remember Me')\n    submit = SubmitField('Login')",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "submit",
        "kind": 5,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "submit = SubmitField('Register')  \nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember = BooleanField('Remember Me')\n    submit = SubmitField('Login')",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "init_db",
        "description": "init_db",
        "peekOfCode": "def init_db():\n with app.app_context():  # Ensure you're in the app's context\n    db.create_all()\n    print(\"Database tables created successfully!\")\nif __name__ == '__main__':\n    init_db()",
        "detail": "init_db",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(UserMixin,db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(200), nullable=False)\n    role = db.Column(db.String(50), nullable=False)\n    # Flask-Login required properties\n    #Password hashing and verification\n    def set_password(self, password):\n        from werkzeug.security import generate_password_hash",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "bcrypt = Bcrypt()\nclass User(UserMixin,db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(200), nullable=False)\n    role = db.Column(db.String(50), nullable=False)\n    # Flask-Login required properties\n    #Password hashing and verification\n    def set_password(self, password):",
        "detail": "models",
        "documentation": {}
    }
]